cmake_minimum_required(VERSION 2.8)
project(common_vme)
option(UNIVERSE2 "open source universe2 driver" ON)
IF (DEFINED ENV{CHAOS_BUNDLE} )
  include($ENV{CHAOS_BUNDLE}/tools/project_template/CMakeChaos.txt)
ELSE()
  MESSAGE(STATUS "STANDALONE, environment CHAOS_BUNDLE defined")
  IF (NOT CMAKE_INSTALL_PREFIX) 
    MESSAGE(fatal "you must add -DCMAKE_INSTALL_PREFIX=<dir>")
  ELSE()
    MESSAGE(STATUS "install prefix ${CMAKE_INSTALL_PREFIX}")
  ENDIF()
  INCLUDE_DIRECTORIES(. ../.. ${CMAKE_INSTALL_PREFIX}/include)
  LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/build ${CMAKE_INSTALL_PREFIX}/lib)
ENDIF()
ADD_DEFINITIONS(-DDEBUG -fpermissive)
INCLUDE_DIRECTORIES(core)

MESSAGE(STATUS "enable universe2 driver")
ADD_DEFINITIONS(-DUNIVERSE2)  

ADD_SUBDIRECTORY(vmedrv/universe2)


SET(src core/vmewrap.cpp core/vmewrap_universe2.cpp core/vmewrap_caenvme.cpp) 
ADD_LIBRARY(${PROJECT_NAME} ${src})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} common_debug boost_log boost_system boost_thread rt pthread ${FrameworkLib})
ADD_SUBDIRECTORY(caen)
ADD_SUBDIRECTORY(sis)
SET(test_btf_daq_src test/test_btf_daq.c )


ADD_EXECUTABLE(test_btf_daq ${test_btf_daq_src})
ADD_EXECUTABLE(test_btf_daq2 test/test_btf_daq2.c)
ADD_EXECUTABLE(test_pio test/test_pio.c)
ADD_EXECUTABLE(vme_read test/vme_read.c)
ADD_EXECUTABLE(vme_write test/vme_write.c)
SET(vmelibs common_vme_caen common_vme_sis common_vme vme)
TARGET_LINK_LIBRARIES(test_btf_daq2 ${PROJECT_NAME} ${vmelibs} common_debug ${FrameworkLib} )
TARGET_LINK_LIBRARIES(test_btf_daq ${PROJECT_NAME} ${vmelibs} common_debug ${FrameworkLib} )
TARGET_LINK_LIBRARIES(test_pio ${PROJECT_NAME} ${vmelibs} common_debug ${FrameworkLib} )
TARGET_LINK_LIBRARIES(vme_read ${PROJECT_NAME} common_vme vme common_debug ${FrameworkLib} )
TARGET_LINK_LIBRARIES(vme_write ${PROJECT_NAME} common_vme vme common_debug ${FrameworkLib} )

INSTALL_TARGETS(/lib ${PROJECT_NAME})
INSTALL_TARGETS(/bin test_btf_daq)
INSTALL_TARGETS(/bin test_pio)
INSTALL_TARGETS(/bin vme_read)
INSTALL_TARGETS(/bin vme_write)
FILE(GLOB src sis/*.h)
INSTALL(FILES ${src} DESTINATION include/common/vme/sis)
FILE(GLOB src vmewrap/*.h)
INSTALL(FILES ${src} DESTINATION include/common/vme/vmewrap)
